generator client {
  provider = "prisma-client-js"
  // output   = "../src/__generated__/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  email     String   @unique
  role      Role     @default(USER)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Chat      Chat[]
  profile   Profile?
  token     Token[]

  isBlocked Boolean  @default(false) @map("is_blocked")
  @@map("users")
}

model Profile {
  id          String  @id @default(cuid())
  displayName String  @map("display_name")
  bio         String?
  avatar      String?
  
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String  @unique @map("user_id")

  @@map("profiles")
}

model Chat {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messages  Message[]

  // sender    User     @relation(fields: [senderId], references: [id])
  // senderId  String   @map("sender_id")

  @@map("chats")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String   @unique @map("chat_id")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("messages")
}

model Token {
  id        String   @id @default(cuid())
  token     String  @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String 
  userAgent String  @map("user_agent")

  @@map("tokens")
}

enum Role {
  USER
  ADMIN
}
