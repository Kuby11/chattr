generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  email     String   @unique
  role      UserRole @default(USER)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Chat      Chat[]
  profile   Profile?

  messages  Message[]

  friends   Friendship[] @relation("user_friends")
  friendOf  Friendship[]  @relation("friend_of")
  
  friendRequestSender FriendRequest[] @relation("friend_requests_sender")
  friendRequestReceiver FriendRequest[] @relation("friend_requests_receiver")
  
  token     Token[]

  isBlocked Boolean  @default(false) @map("is_blocked")
  @@map("users")
}

model Profile {
  id          String  @id @default(cuid())
  displayName String  @map("display_name")
  bio         String?
  avatar      String?
  
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String  @unique @map("user_id")

  @@map("profiles")
}

model Chat {
  id        String   @id @default(cuid())
  title     String? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isGroup   Boolean  @default(false)
  // messages  Message[]


  @@map("chats")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  
  // chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  // chatId    String   @unique @map("chat_id")
  
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String   @map("sender_id")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("messages")
}

model Token {
  id        String   @id @default(cuid())
  token     String  @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String 
  userAgent String  @map("user_agent")

  @@map("tokens")
}

enum UserRole {
  USER
  ADMIN

  @@map("user_role")
}

model Friendship {
  id       String @id @default(cuid())
  
  user     User   @relation("user_friends",fields: [userId], references: [id], onDelete: Cascade)
  userId   String @map("user_id")

  friendOf   User   @relation("friend_of",fields: [friendOfId], references: [id], onDelete: Cascade)
  friendOfId String @map("friend_of_id")

  createdAt DateTime @default(now())

  @@map("friends")
  @@unique([userId, friendOfId])
}

model FriendRequest {
  id       String @id @default(cuid())
  status   FriendRequestStatus @default(PENDING)

  sender   User   @relation("friend_requests_sender",fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String @map("sender_id")

  receiver User   @relation("friend_requests_receiver",fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String @map("receiver_id")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("friend_requests")
  @@unique([senderId, receiverId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
  
  @@map("friend_request_status")
}
